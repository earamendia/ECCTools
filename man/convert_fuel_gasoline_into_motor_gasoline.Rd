% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cleans.R
\name{convert_fuel_gasoline_into_motor_gasoline}
\alias{convert_fuel_gasoline_into_motor_gasoline}
\title{Converts jet fuel type gasoline into motor gasoline}
\usage{
convert_fuel_gasoline_into_motor_gasoline(
  .tidy_iea_df,
  product = IEATools::iea_cols$product,
  flow = IEATools::iea_cols$flow,
  e_dot = IEATools::iea_cols$e_dot
)
}
\arguments{
\item{.tidy_iea_df}{The \code{.tidy_iea_df} for which jet fuel type gasoline needs to be converted into motor gasoline.}

\item{product, e_dot, flow}{See \code{IEATools::iea_cols}.}
}
\value{
A \code{.tidy_iea_df} for which jet fuel type gasoline is converted into motor gasoline.
}
\description{
This function converts flows of the "Gasoline type jet fuel" product into flows of "Motor gasoline excl. biofuels".
The function then gathers those flows into a single new flow. Basically, it aggregates those two products and keeps the
"Motor gasoline excl. biofuels" product name.
}
\examples{
# Here we add a flow of "Gasoline type jet fuel":
tidy_AB_data \%>\%
tibble::add_row(
 Country = "A",
 Method = "PCM",
 Energy.type = "E",
 Last.stage = "Final",
 Year = 2018,
 Product = "Gasoline type jet fuel",
 Ledger.side = "Consumption",
 Flow.aggregation.point = "Industry",
 Flow = "Iron and steel",
 Unit = "ktoe",
 E.dot = 20
) \%>\%
 dplyr::filter(Country == "A" & stringr::str_detect(Product, "(G|g)asoline")) \%>\%
 print()
# Then we gather both flows:
tidy_AB_data \%>\%
tibble::add_row(
 Country = "A",
 Method = "PCM",
 Energy.type = "E",
 Last.stage = "Final",
 Year = 2018,
 Product = "Gasoline type jet fuel",
 Ledger.side = "Consumption",
 Flow.aggregation.point = "Industry",
 Flow = "Iron and steel",
 Unit = "ktoe",
 E.dot = 20
) \%>\%
 dplyr::filter(Country == "A" & stringr::str_detect(Product, "(G|g)asoline")) \%>\%
 convert_fuel_gasoline_into_motor_gasoline() \%>\%
 print()
}
